{"version":3,"file":"workbox-background-sync.dev.js","sources":["../_version.mjs","../utils/constants.mjs","../models/QueueStore.mjs","../models/StorableRequest.mjs","../Queue.mjs","../Plugin.mjs","../index.mjs"],"sourcesContent":["try{self['workbox:background-sync:4.0.0']&&_()}catch(e){}// eslint-disable-line","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\n\nimport '../_version.mjs';\n\nexport const DB_VERSION = 2;\nexport const DB_NAME = 'workbox-background-sync';\nexport const OBJECT_STORE_NAME = 'requests';\nexport const INDEXED_PROP = 'queueName';\nexport const TAG_PREFIX = 'workbox-background-sync';\nexport const MAX_RETENTION_TIME = 60 * 24 * 7; // 7 days in minutes\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\n\nimport {assert} from 'workbox-core/_private/assert.mjs';\nimport {DBWrapper} from 'workbox-core/_private/DBWrapper.mjs';\nimport {migrateDb} from 'workbox-core/_private/migrateDb.mjs';\nimport {DB_NAME, DB_VERSION, OBJECT_STORE_NAME, INDEXED_PROP}\n  from '../utils/constants.mjs';\n\nimport '../_version.mjs';\n\n\n/**\n * A class to manage storing requests from a Queue in IndexedbDB,\n * indexed by their queue name for easier access.\n *\n * @private\n */\nexport class QueueStore {\n  /**\n   * Associates this instance with a Queue instance, so entries added can be\n   * identified by their queue name.\n   *\n   * @param {string} queueName\n   * @private\n   */\n  constructor(queueName) {\n    this._queueName = queueName;\n    this._db = new DBWrapper(DB_NAME, DB_VERSION, {\n      onupgradeneeded: (evt) => this._upgradeDb(evt),\n    });\n  }\n\n  /**\n   * Append an entry last in the queue.\n   *\n   * @param {Object} entry\n   * @param {Object} entry.requestData\n   * @param {number} [entry.timestamp]\n   * @param {Object} [entry.metadata]\n   */\n  async pushEntry(entry) {\n    if (process.env.NODE_ENV !== 'production') {\n      assert.isType(entry, 'object', {\n        moduleName: 'workbox-background-sync',\n        className: 'QueueStore',\n        funcName: 'pushEntry',\n        paramName: 'entry',\n      });\n      assert.isType(entry.requestData, 'object', {\n        moduleName: 'workbox-background-sync',\n        className: 'QueueStore',\n        funcName: 'pushEntry',\n        paramName: 'entry.requestData',\n      });\n    }\n\n    // Don't specify an ID since one is automatically generated.\n    delete entry.id;\n    entry.queueName = this._queueName;\n\n    await this._db.add(OBJECT_STORE_NAME, entry);\n  }\n\n  /**\n   * Preppend an entry first in the queue.\n   *\n   * @param {Object} entry\n   * @param {Object} entry.requestData\n   * @param {number} [entry.timestamp]\n   * @param {Object} [entry.metadata]\n   */\n  async unshiftEntry(entry) {\n    if (process.env.NODE_ENV !== 'production') {\n      assert.isType(entry, 'object', {\n        moduleName: 'workbox-background-sync',\n        className: 'QueueStore',\n        funcName: 'unshiftEntry',\n        paramName: 'entry',\n      });\n      assert.isType(entry.requestData, 'object', {\n        moduleName: 'workbox-background-sync',\n        className: 'QueueStore',\n        funcName: 'unshiftEntry',\n        paramName: 'entry.requestData',\n      });\n    }\n\n    const [firstEntry] = await this._db.getAllMatching(OBJECT_STORE_NAME, {\n      count: 1,\n    });\n\n    if (firstEntry) {\n      // Pick an ID one less than the lowest ID in the object store.\n      entry.id = firstEntry.id - 1;\n    } else {\n      delete entry.id;\n    }\n    entry.queueName = this._queueName;\n\n    await this._db.add(OBJECT_STORE_NAME, entry);\n  }\n\n  /**\n   * Removes and returns the last entry in the queue matching the `queueName`.\n   *\n   * @return {Promise<Object>}\n   */\n  async popEntry() {\n    return this._removeEntry({direction: 'prev'});\n  }\n\n  /**\n   * Removes and returns the first entry in the queue matching the `queueName`.\n   *\n   * @return {Promise<Object>}\n   */\n  async shiftEntry() {\n    return this._removeEntry({direction: 'next'});\n  }\n\n  /**\n   * Removes and returns the first or last entry in the queue (based on the\n   * `direction` argument) matching the `queueName`.\n   *\n   * @return {Promise<Object>}\n   */\n  async _removeEntry({direction}) {\n    const [entry] = await this._db.getAllMatching(OBJECT_STORE_NAME, {\n      direction,\n      index: INDEXED_PROP,\n      query: IDBKeyRange.only(this._queueName),\n      count: 1,\n    });\n\n    if (entry) {\n      await this._db.delete(OBJECT_STORE_NAME, entry.id);\n\n      // Dont' expose the ID or queueName;\n      delete entry.id;\n      delete entry.queueName;\n      return entry;\n    }\n  }\n\n  /**\n   * Upgrades the database given an `upgradeneeded` event.\n   *\n   * @param {Event} event\n   */\n  _upgradeDb(event) {\n    const db = event.target.result;\n    const txn = event.target.transaction;\n    let oldEntries = [];\n\n    migrateDb(event, {\n      v1: (next) => {\n        // When migrating from version 0, this will not exist.\n        if (db.objectStoreNames.contains(OBJECT_STORE_NAME)) {\n          // Get any existing entries in the v1 requests store\n          // and then delete it.\n          const objStore = txn.objectStore(OBJECT_STORE_NAME);\n          objStore.openCursor().onsuccess = ({target}) => {\n            const cursor = target.result;\n            if (cursor) {\n              oldEntries.push(cursor.value);\n              cursor.continue();\n            } else {\n              db.deleteObjectStore(OBJECT_STORE_NAME);\n              next();\n            }\n          };\n        } else {\n          next();\n        }\n      },\n      v2: (next) => {\n        // Creates v2 of the requests store and adds back any existing\n        // entries in the new format.\n        const objStore = db.createObjectStore(OBJECT_STORE_NAME, {\n          autoIncrement: true,\n          keyPath: 'id',\n        });\n        objStore.createIndex(INDEXED_PROP, INDEXED_PROP, {unique: false});\n\n        if (oldEntries.length) {\n          for (const {queueName, storableRequest} of oldEntries) {\n            // Move the timestamp from `storableRequest` to the top level.\n            const timestamp = storableRequest.timestamp;\n\n            // Reformat the storable request data\n            const requestData = Object.assign(\n                storableRequest.requestInit, {url: storableRequest.url});\n\n            objStore.add({queueName, timestamp, requestData});\n          }\n        }\n        next();\n      },\n    });\n  }\n}\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\n\nimport {assert} from 'workbox-core/_private/assert.mjs';\nimport '../_version.mjs';\n\n\nconst serializableProperties = [\n  'method',\n  'referrer',\n  'referrerPolicy',\n  'mode',\n  'credentials',\n  'cache',\n  'redirect',\n  'integrity',\n  'keepalive',\n];\n\n\n/**\n * A class to make it easier to serialize and de-serialize requests so they\n * can be stored in IndexedDB.\n *\n * @private\n */\nexport default class StorableRequest {\n  /**\n   * Converts a Request object to a plain object that can be structured\n   * cloned or JSON-stringified.\n   *\n   * @param {Request} request\n   * @return {Promise<StorableRequest>}\n   *\n   * @private\n   */\n  static async fromRequest(request) {\n    const requestData = {\n      url: request.url,\n      headers: {},\n    };\n\n    // Set the body if present.\n    if (request.method !== 'GET') {\n      // Use blob to support non-text request bodies,\n      // and clone first in case the caller still needs the request.\n      requestData.body = await request.clone().blob();\n    }\n\n    // Convert the headers from an iterable to an object.\n    for (const [key, value] of request.headers.entries()) {\n      requestData.headers[key] = value;\n    }\n\n    // Add all other serializable request properties\n    for (const prop of serializableProperties) {\n      if (request[prop] !== undefined) {\n        requestData[prop] = request[prop];\n      }\n    }\n\n    return new StorableRequest(requestData);\n  }\n\n  /**\n   * Accepts an object of request data that can be used to construct a\n   * `Request` but can also be stored in IndexedDB.\n   *\n   * @param {Object} requestData An object of request data that includes the\n   *     `url` plus any relevant properties of\n   *     [requestInit]{@link https://fetch.spec.whatwg.org/#requestinit}.\n   * @private\n   */\n  constructor(requestData) {\n    if (process.env.NODE_ENV !== 'production') {\n      assert.isType(requestData, 'object', {\n        moduleName: 'workbox-background-sync',\n        className: 'StorableRequest',\n        funcName: 'constructor',\n        paramName: 'requestData',\n      });\n      assert.isType(requestData.url, 'string', {\n        moduleName: 'workbox-background-sync',\n        className: 'StorableRequest',\n        funcName: 'constructor',\n        paramName: 'requestData.url',\n      });\n    }\n\n    this._requestData = requestData;\n  }\n\n  /**\n   * Returns a deep clone of the instances `_requestData` object.\n   *\n   * @return {Object}\n   *\n   * @private\n   */\n  toObject() {\n    const requestData = Object.assign({}, this._requestData);\n    requestData.headers = Object.assign({}, this._requestData.headers);\n    if (requestData.body) {\n      requestData.body = requestData.body.slice();\n    }\n\n    return requestData;\n  }\n\n  /**\n   * Converts this instance to a Request.\n   *\n   * @return {Request}\n   *\n   * @private\n   */\n  toRequest() {\n    return new Request(this._requestData.url, this._requestData);\n  }\n\n  /**\n   * Creates and returns a deep clone of the instance.\n   *\n   * @return {StorableRequest}\n   *\n   * @private\n   */\n  clone() {\n    return new StorableRequest(this.toObject());\n  }\n}\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\n\nimport {WorkboxError} from 'workbox-core/_private/WorkboxError.mjs';\nimport {logger} from 'workbox-core/_private/logger.mjs';\nimport {assert} from 'workbox-core/_private/assert.mjs';\nimport {getFriendlyURL} from 'workbox-core/_private/getFriendlyURL.mjs';\nimport {QueueStore} from './models/QueueStore.mjs';\nimport StorableRequest from './models/StorableRequest.mjs';\nimport {TAG_PREFIX, MAX_RETENTION_TIME} from './utils/constants.mjs';\nimport './_version.mjs';\n\nconst queueNames = new Set();\n\n/**\n * A class to manage storing failed requests in IndexedDB and retrying them\n * later. All parts of the storing and replaying process are observable via\n * callbacks.\n *\n * @memberof workbox.backgroundSync\n */\nclass Queue {\n  /**\n   * Creates an instance of Queue with the given options\n   *\n   * @param {string} name The unique name for this queue. This name must be\n   *     unique as it's used to register sync events and store requests\n   *     in IndexedDB specific to this instance. An error will be thrown if\n   *     a duplicate name is detected.\n   * @param {Object} [options]\n   * @param {Function} [options.onSync] A function that gets invoked whenever\n   *     the 'sync' event fires. The function is invoked with an object\n   *     containing the `queue` property (referencing this instance), and you\n   *     can use the callback to customize the replay behavior of the queue.\n   *     When not set the `replayRequests()` method is called.\n   * @param {number} [options.maxRetentionTime=7 days] The amount of time (in\n   *     minutes) a request may be retried. After this amount of time has\n   *     passed, the request will be deleted from the queue.\n   */\n  constructor(name, {onSync, maxRetentionTime} = {}) {\n    // Ensure the store name is not already being used\n    if (queueNames.has(name)) {\n      throw new WorkboxError('duplicate-queue-name', {name});\n    } else {\n      queueNames.add(name);\n    }\n\n    this._name = name;\n    this._onSync = onSync || this.replayRequests;\n    this._maxRetentionTime = maxRetentionTime || MAX_RETENTION_TIME;\n    this._queueStore = new QueueStore(this._name);\n\n    this._addSyncListener();\n  }\n\n  /**\n   * @return {string}\n   */\n  get name() {\n    return this._name;\n  }\n\n  /**\n   * Stores the passed request in IndexedDB (with its timestamp and any\n   * metadata) at the end of the queue.\n   *\n   * @param {Object} entry\n   * @param {Request} entry.request The request to store in the queue.\n   * @param {Object} [entry.metadata] Any metadata you want associated with the\n   *     stored request. When requests are replayed you'll have access to this\n   *     metadata object in case you need to modify the request beforehand.\n   * @param {number} [entry.timestamp] The timestamp (Epoch time in\n   *     milliseconds) when the request was first added to the queue. This is\n   *     used along with `maxRetentionTime` to remove outdated requests. In\n   *     general you don't need to set this value, as it's automatically set\n   *     for you (defaulting to `Date.now()`), but you can update it if you\n   *     don't want particular requests to expire.\n   */\n  async pushRequest(entry) {\n    if (process.env.NODE_ENV !== 'production') {\n      assert.isType(entry, 'object', {\n        moduleName: 'workbox-background-sync',\n        className: 'Queue',\n        funcName: 'pushRequest',\n        paramName: 'entry',\n      });\n      assert.isInstance(entry.request, Request, {\n        moduleName: 'workbox-background-sync',\n        className: 'Queue',\n        funcName: 'pushRequest',\n        paramName: 'entry.request',\n      });\n    }\n\n    await this._addRequest(entry, 'push');\n  }\n\n  /**\n   * Stores the passed request in IndexedDB (with its timestamp and any\n   * metadata) at the beginning of the queue.\n   *\n   * @param {Object} entry\n   * @param {Request} entry.request The request to store in the queue.\n   * @param {Object} [entry.metadata] Any metadata you want associated with the\n   *     stored request. When requests are replayed you'll have access to this\n   *     metadata object in case you need to modify the request beforehand.\n   * @param {number} [entry.timestamp] The timestamp (Epoch time in\n   *     milliseconds) when the request was first added to the queue. This is\n   *     used along with `maxRetentionTime` to remove outdated requests. In\n   *     general you don't need to set this value, as it's automatically set\n   *     for you (defaulting to `Date.now()`), but you can update it if you\n   *     don't want particular requests to expire.\n   */\n  async unshiftRequest(entry) {\n    if (process.env.NODE_ENV !== 'production') {\n      assert.isType(entry, 'object', {\n        moduleName: 'workbox-background-sync',\n        className: 'Queue',\n        funcName: 'unshiftRequest',\n        paramName: 'entry',\n      });\n      assert.isInstance(entry.request, Request, {\n        moduleName: 'workbox-background-sync',\n        className: 'Queue',\n        funcName: 'unshiftRequest',\n        paramName: 'entry.request',\n      });\n    }\n\n    await this._addRequest(entry, 'unshift');\n  }\n\n  /**\n   * Removes and returns the last request in the queue (along with its\n   * timestamp and any metadata). The returned object takes the form:\n   * `{request, timestamp, metadata}`.\n   *\n   * @return {Promise<Object>}\n   */\n  async popRequest() {\n    return this._removeRequest('pop');\n  }\n\n  /**\n   * Removes and returns the first request in the queue (along with its\n   * timestamp and any metadata). The returned object takes the form:\n   * `{request, timestamp, metadata}`.\n   *\n   * @return {Promise<Object>}\n   */\n  async shiftRequest() {\n    return this._removeRequest('shift');\n  }\n\n  /**\n   * Adds the entry to the QueueStore and registers for a sync event.\n   *\n   * @param {Object} entry\n   * @param {Request} entry.request\n   * @param {Object} [entry.metadata]\n   * @param {number} [entry.timestamp=Date.now()]\n   * @param {string} operation ('push' or 'unshift')\n   */\n  async _addRequest(\n      {request, metadata, timestamp = Date.now()}, operation) {\n    const storableRequest = await StorableRequest.fromRequest(request.clone());\n    const entry = {\n      requestData: storableRequest.toObject(),\n      timestamp,\n    };\n\n    // Only include metadata if it's present.\n    if (metadata) {\n      entry.metadata = metadata;\n    }\n\n    await this._queueStore[`${operation}Entry`](entry);\n    await this.registerSync();\n    if (process.env.NODE_ENV !== 'production') {\n      logger.log(`Request for '${getFriendlyURL(request.url)}' has ` +\n          `been added to background sync queue '${this._name}'.`);\n    }\n  }\n\n  /**\n   * Removes and returns the first or last (depending on `operation`) entry\n   * form the QueueStore that's not older than the `maxRetentionTime`.\n   *\n   * @param {string} operation ('pop' or 'shift')\n   * @return {Object|undefined}\n   */\n  async _removeRequest(operation) {\n    const now = Date.now();\n    const entry = await this._queueStore[`${operation}Entry`]();\n\n    if (entry ) {\n      // Ignore requests older than maxRetentionTime. Call this function\n      // recursively until an unexpired request is found.\n      const maxRetentionTimeInMs = this._maxRetentionTime * 60 * 1000;\n      if (now - entry.timestamp > maxRetentionTimeInMs) {\n        return this._removeRequest(operation);\n      }\n\n      entry.request = new StorableRequest(entry.requestData).toRequest();\n      delete entry.requestData;\n\n      return entry;\n    }\n  }\n\n  /**\n   * Loops through each request in the queue and attempts to re-fetch it.\n   * If any request fails to re-fetch, it's put back in the same position in\n   * the queue (which registers a retry for the next sync event).\n   */\n  async replayRequests() {\n    let entry;\n    while (entry = await this.shiftRequest()) {\n      try {\n        await fetch(entry.request);\n\n        if (process.env.NODE_ENV !== 'production') {\n          logger.log(`Request for '${getFriendlyURL(entry.request.url)}'` +\n             `has been replayed in queue '${this._name}'`);\n        }\n      } catch (error) {\n        await this.unshiftRequest(entry);\n\n        if (process.env.NODE_ENV !== 'production') {\n          logger.log(`Request for '${getFriendlyURL(entry.request.url)}'` +\n             `failed to replay, putting it back in queue '${this._name}'`);\n        }\n        throw new WorkboxError('queue-replay-failed', {name: this._name});\n      }\n    }\n    if (process.env.NODE_ENV !== 'production') {\n      logger.log(`All requests in queue '${this.name}' have successfully ` +\n          `replayed; the queue is now empty!`);\n    }\n  }\n\n  /**\n   * Registers a sync event with a tag unique to this instance.\n   */\n  async registerSync() {\n    if ('sync' in registration) {\n      try {\n        await registration.sync.register(`${TAG_PREFIX}:${this._name}`);\n      } catch (err) {\n        // This means the registration failed for some reason, possibly due to\n        // the user disabling it.\n        if (process.env.NODE_ENV !== 'production') {\n          logger.warn(\n              `Unable to register sync event for '${this._name}'.`, err);\n        }\n      }\n    }\n  }\n\n  /**\n   * In sync-supporting browsers, this adds a listener for the sync event.\n   * In non-sync-supporting browsers, this will retry the queue on service\n   * worker startup.\n   *\n   * @private\n   */\n  _addSyncListener() {\n    if ('sync' in registration) {\n      self.addEventListener('sync', (event) => {\n        if (event.tag === `${TAG_PREFIX}:${this._name}`) {\n          if (process.env.NODE_ENV !== 'production') {\n            logger.log(`Background sync for tag '${event.tag}'` +\n                `has been received`);\n          }\n          event.waitUntil(this._onSync({queue: this}));\n        }\n      });\n    } else {\n      if (process.env.NODE_ENV !== 'production') {\n        logger.log(`Background sync replaying without background sync event`);\n      }\n      // If the browser doesn't support background sync, retry\n      // every time the service worker starts up as a fallback.\n      this._onSync({queue: this});\n    }\n  }\n\n  /**\n   * Returns the set of queue names. This is primarily used to reset the list\n   * of queue names in tests.\n   *\n   * @return {Set}\n   *\n   * @private\n   */\n  static get _queueNames() {\n    return queueNames;\n  }\n}\n\nexport {Queue};\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\n\nimport {Queue} from './Queue.mjs';\nimport './_version.mjs';\n\n/**\n * A class implementing the `fetchDidFail` lifecycle callback. This makes it\n * easier to add failed requests to a background sync Queue.\n *\n * @memberof workbox.backgroundSync\n */\nclass Plugin {\n  /**\n   * @param {...*} queueArgs Args to forward to the composed Queue instance.\n   *    See the [Queue]{@link workbox.backgroundSync.Queue} documentation for\n   *    parameter details.\n   */\n  constructor(...queueArgs) {\n    this._queue = new Queue(...queueArgs);\n    this.fetchDidFail = this.fetchDidFail.bind(this);\n  }\n\n  /**\n   * @param {Object} options\n   * @param {Request} options.request\n   * @private\n   */\n  async fetchDidFail({request}) {\n    await this._queue.pushRequest({request});\n  }\n}\n\nexport {Plugin};\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\n\nimport {Queue} from './Queue.mjs';\nimport {Plugin} from './Plugin.mjs';\nimport './_version.mjs';\n\n\n/**\n * @namespace workbox.backgroundSync\n */\n\nexport {\n  Queue,\n  Plugin,\n};\n"],"names":["self","_","e","DB_VERSION","DB_NAME","OBJECT_STORE_NAME","INDEXED_PROP","TAG_PREFIX","MAX_RETENTION_TIME","QueueStore","constructor","queueName","_queueName","_db","DBWrapper","onupgradeneeded","evt","_upgradeDb","pushEntry","entry","assert","isType","moduleName","className","funcName","paramName","requestData","id","add","unshiftEntry","firstEntry","getAllMatching","count","popEntry","_removeEntry","direction","shiftEntry","index","query","IDBKeyRange","only","delete","event","db","target","result","txn","transaction","oldEntries","migrateDb","v1","next","objectStoreNames","contains","objStore","objectStore","openCursor","onsuccess","cursor","push","value","continue","deleteObjectStore","v2","createObjectStore","autoIncrement","keyPath","createIndex","unique","length","storableRequest","timestamp","Object","assign","requestInit","url","serializableProperties","StorableRequest","fromRequest","request","headers","method","body","clone","blob","key","entries","prop","undefined","_requestData","toObject","slice","toRequest","Request","queueNames","Set","Queue","name","onSync","maxRetentionTime","has","WorkboxError","_name","_onSync","replayRequests","_maxRetentionTime","_queueStore","_addSyncListener","pushRequest","isInstance","_addRequest","unshiftRequest","popRequest","_removeRequest","shiftRequest","metadata","Date","now","operation","registerSync","logger","log","getFriendlyURL","maxRetentionTimeInMs","fetch","error","registration","sync","register","err","warn","addEventListener","tag","waitUntil","queue","_queueNames","Plugin","queueArgs","_queue","fetchDidFail","bind"],"mappings":"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"}