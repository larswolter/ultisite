{"version":3,"file":"workbox-background-sync.prod.js","sources":["../_version.mjs","../utils/constants.mjs","../models/QueueStore.mjs","../models/StorableRequest.mjs","../Queue.mjs","../Plugin.mjs"],"sourcesContent":["try{self['workbox:background-sync:4.0.0']&&_()}catch(e){}// eslint-disable-line","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\n\nimport '../_version.mjs';\n\nexport const DB_VERSION = 2;\nexport const DB_NAME = 'workbox-background-sync';\nexport const OBJECT_STORE_NAME = 'requests';\nexport const INDEXED_PROP = 'queueName';\nexport const TAG_PREFIX = 'workbox-background-sync';\nexport const MAX_RETENTION_TIME = 60 * 24 * 7; // 7 days in minutes\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\n\nimport {assert} from 'workbox-core/_private/assert.mjs';\nimport {DBWrapper} from 'workbox-core/_private/DBWrapper.mjs';\nimport {migrateDb} from 'workbox-core/_private/migrateDb.mjs';\nimport {DB_NAME, DB_VERSION, OBJECT_STORE_NAME, INDEXED_PROP}\n  from '../utils/constants.mjs';\n\nimport '../_version.mjs';\n\n\n/**\n * A class to manage storing requests from a Queue in IndexedbDB,\n * indexed by their queue name for easier access.\n *\n * @private\n */\nexport class QueueStore {\n  /**\n   * Associates this instance with a Queue instance, so entries added can be\n   * identified by their queue name.\n   *\n   * @param {string} queueName\n   * @private\n   */\n  constructor(queueName) {\n    this._queueName = queueName;\n    this._db = new DBWrapper(DB_NAME, DB_VERSION, {\n      onupgradeneeded: (evt) => this._upgradeDb(evt),\n    });\n  }\n\n  /**\n   * Append an entry last in the queue.\n   *\n   * @param {Object} entry\n   * @param {Object} entry.requestData\n   * @param {number} [entry.timestamp]\n   * @param {Object} [entry.metadata]\n   */\n  async pushEntry(entry) {\n    if (process.env.NODE_ENV !== 'production') {\n      assert.isType(entry, 'object', {\n        moduleName: 'workbox-background-sync',\n        className: 'QueueStore',\n        funcName: 'pushEntry',\n        paramName: 'entry',\n      });\n      assert.isType(entry.requestData, 'object', {\n        moduleName: 'workbox-background-sync',\n        className: 'QueueStore',\n        funcName: 'pushEntry',\n        paramName: 'entry.requestData',\n      });\n    }\n\n    // Don't specify an ID since one is automatically generated.\n    delete entry.id;\n    entry.queueName = this._queueName;\n\n    await this._db.add(OBJECT_STORE_NAME, entry);\n  }\n\n  /**\n   * Preppend an entry first in the queue.\n   *\n   * @param {Object} entry\n   * @param {Object} entry.requestData\n   * @param {number} [entry.timestamp]\n   * @param {Object} [entry.metadata]\n   */\n  async unshiftEntry(entry) {\n    if (process.env.NODE_ENV !== 'production') {\n      assert.isType(entry, 'object', {\n        moduleName: 'workbox-background-sync',\n        className: 'QueueStore',\n        funcName: 'unshiftEntry',\n        paramName: 'entry',\n      });\n      assert.isType(entry.requestData, 'object', {\n        moduleName: 'workbox-background-sync',\n        className: 'QueueStore',\n        funcName: 'unshiftEntry',\n        paramName: 'entry.requestData',\n      });\n    }\n\n    const [firstEntry] = await this._db.getAllMatching(OBJECT_STORE_NAME, {\n      count: 1,\n    });\n\n    if (firstEntry) {\n      // Pick an ID one less than the lowest ID in the object store.\n      entry.id = firstEntry.id - 1;\n    } else {\n      delete entry.id;\n    }\n    entry.queueName = this._queueName;\n\n    await this._db.add(OBJECT_STORE_NAME, entry);\n  }\n\n  /**\n   * Removes and returns the last entry in the queue matching the `queueName`.\n   *\n   * @return {Promise<Object>}\n   */\n  async popEntry() {\n    return this._removeEntry({direction: 'prev'});\n  }\n\n  /**\n   * Removes and returns the first entry in the queue matching the `queueName`.\n   *\n   * @return {Promise<Object>}\n   */\n  async shiftEntry() {\n    return this._removeEntry({direction: 'next'});\n  }\n\n  /**\n   * Removes and returns the first or last entry in the queue (based on the\n   * `direction` argument) matching the `queueName`.\n   *\n   * @return {Promise<Object>}\n   */\n  async _removeEntry({direction}) {\n    const [entry] = await this._db.getAllMatching(OBJECT_STORE_NAME, {\n      direction,\n      index: INDEXED_PROP,\n      query: IDBKeyRange.only(this._queueName),\n      count: 1,\n    });\n\n    if (entry) {\n      await this._db.delete(OBJECT_STORE_NAME, entry.id);\n\n      // Dont' expose the ID or queueName;\n      delete entry.id;\n      delete entry.queueName;\n      return entry;\n    }\n  }\n\n  /**\n   * Upgrades the database given an `upgradeneeded` event.\n   *\n   * @param {Event} event\n   */\n  _upgradeDb(event) {\n    const db = event.target.result;\n    const txn = event.target.transaction;\n    let oldEntries = [];\n\n    migrateDb(event, {\n      v1: (next) => {\n        // When migrating from version 0, this will not exist.\n        if (db.objectStoreNames.contains(OBJECT_STORE_NAME)) {\n          // Get any existing entries in the v1 requests store\n          // and then delete it.\n          const objStore = txn.objectStore(OBJECT_STORE_NAME);\n          objStore.openCursor().onsuccess = ({target}) => {\n            const cursor = target.result;\n            if (cursor) {\n              oldEntries.push(cursor.value);\n              cursor.continue();\n            } else {\n              db.deleteObjectStore(OBJECT_STORE_NAME);\n              next();\n            }\n          };\n        } else {\n          next();\n        }\n      },\n      v2: (next) => {\n        // Creates v2 of the requests store and adds back any existing\n        // entries in the new format.\n        const objStore = db.createObjectStore(OBJECT_STORE_NAME, {\n          autoIncrement: true,\n          keyPath: 'id',\n        });\n        objStore.createIndex(INDEXED_PROP, INDEXED_PROP, {unique: false});\n\n        if (oldEntries.length) {\n          for (const {queueName, storableRequest} of oldEntries) {\n            // Move the timestamp from `storableRequest` to the top level.\n            const timestamp = storableRequest.timestamp;\n\n            // Reformat the storable request data\n            const requestData = Object.assign(\n                storableRequest.requestInit, {url: storableRequest.url});\n\n            objStore.add({queueName, timestamp, requestData});\n          }\n        }\n        next();\n      },\n    });\n  }\n}\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\n\nimport {assert} from 'workbox-core/_private/assert.mjs';\nimport '../_version.mjs';\n\n\nconst serializableProperties = [\n  'method',\n  'referrer',\n  'referrerPolicy',\n  'mode',\n  'credentials',\n  'cache',\n  'redirect',\n  'integrity',\n  'keepalive',\n];\n\n\n/**\n * A class to make it easier to serialize and de-serialize requests so they\n * can be stored in IndexedDB.\n *\n * @private\n */\nexport default class StorableRequest {\n  /**\n   * Converts a Request object to a plain object that can be structured\n   * cloned or JSON-stringified.\n   *\n   * @param {Request} request\n   * @return {Promise<StorableRequest>}\n   *\n   * @private\n   */\n  static async fromRequest(request) {\n    const requestData = {\n      url: request.url,\n      headers: {},\n    };\n\n    // Set the body if present.\n    if (request.method !== 'GET') {\n      // Use blob to support non-text request bodies,\n      // and clone first in case the caller still needs the request.\n      requestData.body = await request.clone().blob();\n    }\n\n    // Convert the headers from an iterable to an object.\n    for (const [key, value] of request.headers.entries()) {\n      requestData.headers[key] = value;\n    }\n\n    // Add all other serializable request properties\n    for (const prop of serializableProperties) {\n      if (request[prop] !== undefined) {\n        requestData[prop] = request[prop];\n      }\n    }\n\n    return new StorableRequest(requestData);\n  }\n\n  /**\n   * Accepts an object of request data that can be used to construct a\n   * `Request` but can also be stored in IndexedDB.\n   *\n   * @param {Object} requestData An object of request data that includes the\n   *     `url` plus any relevant properties of\n   *     [requestInit]{@link https://fetch.spec.whatwg.org/#requestinit}.\n   * @private\n   */\n  constructor(requestData) {\n    if (process.env.NODE_ENV !== 'production') {\n      assert.isType(requestData, 'object', {\n        moduleName: 'workbox-background-sync',\n        className: 'StorableRequest',\n        funcName: 'constructor',\n        paramName: 'requestData',\n      });\n      assert.isType(requestData.url, 'string', {\n        moduleName: 'workbox-background-sync',\n        className: 'StorableRequest',\n        funcName: 'constructor',\n        paramName: 'requestData.url',\n      });\n    }\n\n    this._requestData = requestData;\n  }\n\n  /**\n   * Returns a deep clone of the instances `_requestData` object.\n   *\n   * @return {Object}\n   *\n   * @private\n   */\n  toObject() {\n    const requestData = Object.assign({}, this._requestData);\n    requestData.headers = Object.assign({}, this._requestData.headers);\n    if (requestData.body) {\n      requestData.body = requestData.body.slice();\n    }\n\n    return requestData;\n  }\n\n  /**\n   * Converts this instance to a Request.\n   *\n   * @return {Request}\n   *\n   * @private\n   */\n  toRequest() {\n    return new Request(this._requestData.url, this._requestData);\n  }\n\n  /**\n   * Creates and returns a deep clone of the instance.\n   *\n   * @return {StorableRequest}\n   *\n   * @private\n   */\n  clone() {\n    return new StorableRequest(this.toObject());\n  }\n}\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\n\nimport {WorkboxError} from 'workbox-core/_private/WorkboxError.mjs';\nimport {logger} from 'workbox-core/_private/logger.mjs';\nimport {assert} from 'workbox-core/_private/assert.mjs';\nimport {getFriendlyURL} from 'workbox-core/_private/getFriendlyURL.mjs';\nimport {QueueStore} from './models/QueueStore.mjs';\nimport StorableRequest from './models/StorableRequest.mjs';\nimport {TAG_PREFIX, MAX_RETENTION_TIME} from './utils/constants.mjs';\nimport './_version.mjs';\n\nconst queueNames = new Set();\n\n/**\n * A class to manage storing failed requests in IndexedDB and retrying them\n * later. All parts of the storing and replaying process are observable via\n * callbacks.\n *\n * @memberof workbox.backgroundSync\n */\nclass Queue {\n  /**\n   * Creates an instance of Queue with the given options\n   *\n   * @param {string} name The unique name for this queue. This name must be\n   *     unique as it's used to register sync events and store requests\n   *     in IndexedDB specific to this instance. An error will be thrown if\n   *     a duplicate name is detected.\n   * @param {Object} [options]\n   * @param {Function} [options.onSync] A function that gets invoked whenever\n   *     the 'sync' event fires. The function is invoked with an object\n   *     containing the `queue` property (referencing this instance), and you\n   *     can use the callback to customize the replay behavior of the queue.\n   *     When not set the `replayRequests()` method is called.\n   * @param {number} [options.maxRetentionTime=7 days] The amount of time (in\n   *     minutes) a request may be retried. After this amount of time has\n   *     passed, the request will be deleted from the queue.\n   */\n  constructor(name, {onSync, maxRetentionTime} = {}) {\n    // Ensure the store name is not already being used\n    if (queueNames.has(name)) {\n      throw new WorkboxError('duplicate-queue-name', {name});\n    } else {\n      queueNames.add(name);\n    }\n\n    this._name = name;\n    this._onSync = onSync || this.replayRequests;\n    this._maxRetentionTime = maxRetentionTime || MAX_RETENTION_TIME;\n    this._queueStore = new QueueStore(this._name);\n\n    this._addSyncListener();\n  }\n\n  /**\n   * @return {string}\n   */\n  get name() {\n    return this._name;\n  }\n\n  /**\n   * Stores the passed request in IndexedDB (with its timestamp and any\n   * metadata) at the end of the queue.\n   *\n   * @param {Object} entry\n   * @param {Request} entry.request The request to store in the queue.\n   * @param {Object} [entry.metadata] Any metadata you want associated with the\n   *     stored request. When requests are replayed you'll have access to this\n   *     metadata object in case you need to modify the request beforehand.\n   * @param {number} [entry.timestamp] The timestamp (Epoch time in\n   *     milliseconds) when the request was first added to the queue. This is\n   *     used along with `maxRetentionTime` to remove outdated requests. In\n   *     general you don't need to set this value, as it's automatically set\n   *     for you (defaulting to `Date.now()`), but you can update it if you\n   *     don't want particular requests to expire.\n   */\n  async pushRequest(entry) {\n    if (process.env.NODE_ENV !== 'production') {\n      assert.isType(entry, 'object', {\n        moduleName: 'workbox-background-sync',\n        className: 'Queue',\n        funcName: 'pushRequest',\n        paramName: 'entry',\n      });\n      assert.isInstance(entry.request, Request, {\n        moduleName: 'workbox-background-sync',\n        className: 'Queue',\n        funcName: 'pushRequest',\n        paramName: 'entry.request',\n      });\n    }\n\n    await this._addRequest(entry, 'push');\n  }\n\n  /**\n   * Stores the passed request in IndexedDB (with its timestamp and any\n   * metadata) at the beginning of the queue.\n   *\n   * @param {Object} entry\n   * @param {Request} entry.request The request to store in the queue.\n   * @param {Object} [entry.metadata] Any metadata you want associated with the\n   *     stored request. When requests are replayed you'll have access to this\n   *     metadata object in case you need to modify the request beforehand.\n   * @param {number} [entry.timestamp] The timestamp (Epoch time in\n   *     milliseconds) when the request was first added to the queue. This is\n   *     used along with `maxRetentionTime` to remove outdated requests. In\n   *     general you don't need to set this value, as it's automatically set\n   *     for you (defaulting to `Date.now()`), but you can update it if you\n   *     don't want particular requests to expire.\n   */\n  async unshiftRequest(entry) {\n    if (process.env.NODE_ENV !== 'production') {\n      assert.isType(entry, 'object', {\n        moduleName: 'workbox-background-sync',\n        className: 'Queue',\n        funcName: 'unshiftRequest',\n        paramName: 'entry',\n      });\n      assert.isInstance(entry.request, Request, {\n        moduleName: 'workbox-background-sync',\n        className: 'Queue',\n        funcName: 'unshiftRequest',\n        paramName: 'entry.request',\n      });\n    }\n\n    await this._addRequest(entry, 'unshift');\n  }\n\n  /**\n   * Removes and returns the last request in the queue (along with its\n   * timestamp and any metadata). The returned object takes the form:\n   * `{request, timestamp, metadata}`.\n   *\n   * @return {Promise<Object>}\n   */\n  async popRequest() {\n    return this._removeRequest('pop');\n  }\n\n  /**\n   * Removes and returns the first request in the queue (along with its\n   * timestamp and any metadata). The returned object takes the form:\n   * `{request, timestamp, metadata}`.\n   *\n   * @return {Promise<Object>}\n   */\n  async shiftRequest() {\n    return this._removeRequest('shift');\n  }\n\n  /**\n   * Adds the entry to the QueueStore and registers for a sync event.\n   *\n   * @param {Object} entry\n   * @param {Request} entry.request\n   * @param {Object} [entry.metadata]\n   * @param {number} [entry.timestamp=Date.now()]\n   * @param {string} operation ('push' or 'unshift')\n   */\n  async _addRequest(\n      {request, metadata, timestamp = Date.now()}, operation) {\n    const storableRequest = await StorableRequest.fromRequest(request.clone());\n    const entry = {\n      requestData: storableRequest.toObject(),\n      timestamp,\n    };\n\n    // Only include metadata if it's present.\n    if (metadata) {\n      entry.metadata = metadata;\n    }\n\n    await this._queueStore[`${operation}Entry`](entry);\n    await this.registerSync();\n    if (process.env.NODE_ENV !== 'production') {\n      logger.log(`Request for '${getFriendlyURL(request.url)}' has ` +\n          `been added to background sync queue '${this._name}'.`);\n    }\n  }\n\n  /**\n   * Removes and returns the first or last (depending on `operation`) entry\n   * form the QueueStore that's not older than the `maxRetentionTime`.\n   *\n   * @param {string} operation ('pop' or 'shift')\n   * @return {Object|undefined}\n   */\n  async _removeRequest(operation) {\n    const now = Date.now();\n    const entry = await this._queueStore[`${operation}Entry`]();\n\n    if (entry ) {\n      // Ignore requests older than maxRetentionTime. Call this function\n      // recursively until an unexpired request is found.\n      const maxRetentionTimeInMs = this._maxRetentionTime * 60 * 1000;\n      if (now - entry.timestamp > maxRetentionTimeInMs) {\n        return this._removeRequest(operation);\n      }\n\n      entry.request = new StorableRequest(entry.requestData).toRequest();\n      delete entry.requestData;\n\n      return entry;\n    }\n  }\n\n  /**\n   * Loops through each request in the queue and attempts to re-fetch it.\n   * If any request fails to re-fetch, it's put back in the same position in\n   * the queue (which registers a retry for the next sync event).\n   */\n  async replayRequests() {\n    let entry;\n    while (entry = await this.shiftRequest()) {\n      try {\n        await fetch(entry.request);\n\n        if (process.env.NODE_ENV !== 'production') {\n          logger.log(`Request for '${getFriendlyURL(entry.request.url)}'` +\n             `has been replayed in queue '${this._name}'`);\n        }\n      } catch (error) {\n        await this.unshiftRequest(entry);\n\n        if (process.env.NODE_ENV !== 'production') {\n          logger.log(`Request for '${getFriendlyURL(entry.request.url)}'` +\n             `failed to replay, putting it back in queue '${this._name}'`);\n        }\n        throw new WorkboxError('queue-replay-failed', {name: this._name});\n      }\n    }\n    if (process.env.NODE_ENV !== 'production') {\n      logger.log(`All requests in queue '${this.name}' have successfully ` +\n          `replayed; the queue is now empty!`);\n    }\n  }\n\n  /**\n   * Registers a sync event with a tag unique to this instance.\n   */\n  async registerSync() {\n    if ('sync' in registration) {\n      try {\n        await registration.sync.register(`${TAG_PREFIX}:${this._name}`);\n      } catch (err) {\n        // This means the registration failed for some reason, possibly due to\n        // the user disabling it.\n        if (process.env.NODE_ENV !== 'production') {\n          logger.warn(\n              `Unable to register sync event for '${this._name}'.`, err);\n        }\n      }\n    }\n  }\n\n  /**\n   * In sync-supporting browsers, this adds a listener for the sync event.\n   * In non-sync-supporting browsers, this will retry the queue on service\n   * worker startup.\n   *\n   * @private\n   */\n  _addSyncListener() {\n    if ('sync' in registration) {\n      self.addEventListener('sync', (event) => {\n        if (event.tag === `${TAG_PREFIX}:${this._name}`) {\n          if (process.env.NODE_ENV !== 'production') {\n            logger.log(`Background sync for tag '${event.tag}'` +\n                `has been received`);\n          }\n          event.waitUntil(this._onSync({queue: this}));\n        }\n      });\n    } else {\n      if (process.env.NODE_ENV !== 'production') {\n        logger.log(`Background sync replaying without background sync event`);\n      }\n      // If the browser doesn't support background sync, retry\n      // every time the service worker starts up as a fallback.\n      this._onSync({queue: this});\n    }\n  }\n\n  /**\n   * Returns the set of queue names. This is primarily used to reset the list\n   * of queue names in tests.\n   *\n   * @return {Set}\n   *\n   * @private\n   */\n  static get _queueNames() {\n    return queueNames;\n  }\n}\n\nexport {Queue};\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\n\nimport {Queue} from './Queue.mjs';\nimport './_version.mjs';\n\n/**\n * A class implementing the `fetchDidFail` lifecycle callback. This makes it\n * easier to add failed requests to a background sync Queue.\n *\n * @memberof workbox.backgroundSync\n */\nclass Plugin {\n  /**\n   * @param {...*} queueArgs Args to forward to the composed Queue instance.\n   *    See the [Queue]{@link workbox.backgroundSync.Queue} documentation for\n   *    parameter details.\n   */\n  constructor(...queueArgs) {\n    this._queue = new Queue(...queueArgs);\n    this.fetchDidFail = this.fetchDidFail.bind(this);\n  }\n\n  /**\n   * @param {Object} options\n   * @param {Request} options.request\n   * @private\n   */\n  async fetchDidFail({request}) {\n    await this._queue.pushRequest({request});\n  }\n}\n\nexport {Plugin};\n"],"names":["self","_","e","DB_VERSION","DB_NAME","OBJECT_STORE_NAME","INDEXED_PROP","TAG_PREFIX","MAX_RETENTION_TIME","QueueStore","constructor","queueName","_queueName","_db","DBWrapper","onupgradeneeded","evt","this","_upgradeDb","entry","id","add","firstEntry","getAllMatching","count","_removeEntry","direction","index","query","IDBKeyRange","only","delete","event","db","target","result","txn","transaction","oldEntries","migrateDb","v1","next","objectStoreNames","contains","objectStore","openCursor","onsuccess","cursor","push","value","continue","deleteObjectStore","v2","objStore","createObjectStore","autoIncrement","keyPath","createIndex","unique","length","storableRequest","timestamp","requestData","Object","assign","requestInit","url","serializableProperties","StorableRequest","request","headers","method","body","clone","blob","key","entries","prop","undefined","_requestData","toObject","slice","toRequest","Request","queueNames","Set","Queue","name","onSync","maxRetentionTime","has","WorkboxError","_name","_onSync","replayRequests","_maxRetentionTime","_queueStore","_addSyncListener","_addRequest","_removeRequest","metadata","Date","now","operation","fromRequest","registerSync","maxRetentionTimeInMs","shiftRequest","fetch","error","unshiftRequest","registration","sync","register","err","addEventListener","tag","waitUntil","queue","queueArgs","_queue","fetchDidFail","bind","pushRequest"],"mappings":"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"}